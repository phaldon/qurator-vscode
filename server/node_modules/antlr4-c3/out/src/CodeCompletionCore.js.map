{"version":3,"file":"CodeCompletionCore.js","sourceRoot":"","sources":["../../src/CodeCompletionCore.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * This file is released under the MIT license.\n * Copyright (c) 2016, 2017, Mike Lischke\n *\n * See LICENSE file for more info.\n */\n\n'use strict';\n\nimport { Parser, Vocabulary, Token, TokenStream, RuleContext, ParserRuleContext } from 'antlr4ts';\nimport { ATN, ATNState, ATNStateType, Transition, TransitionType, PredicateTransition, RuleTransition, RuleStartState } from 'antlr4ts/atn';\nimport { IntervalSet } from 'antlr4ts/misc';\n\nexport type TokenList = number[];\nexport type RuleList = number[];\n\n// All the candidates which have been found. Tokens and rules are separated (both use a numeric value).\n// Token entries include a list of tokens that directly follow them (see also the \"following\" member in the FollowSetWithPath class).\nexport class CandidatesCollection {\n    public tokens: Map<number, TokenList> = new Map();\n    public rules: Map<number, RuleList> = new Map();\n};\n\n// A record for a follow set along with the path at which this set was found.\n// If there is only a single symbol in the interval set then we also collect and store tokens which follow\n// this symbol directly in its rule (i.e. there is no intermediate rule transition). Only single label transitions\n// are considered. This is useful if you have a chain of tokens which can be suggested as a whole, because there is\n// a fixed sequence in the grammar.\nclass FollowSetWithPath {\n    public intervals: IntervalSet;\n    public path: RuleList = [];\n    public following: TokenList = [];\n};\n\n// A list of follow sets (for a given state number) + all of them combined for quick hit tests.\n// This data is static in nature (because the used ATN states are part of a static struct: the ATN).\n// Hence it can be shared between all C3 instances, however it depends on the actual parser class (type).\nclass FollowSetsHolder {\n    public sets: FollowSetWithPath[];\n    public combined: IntervalSet;\n};\n\ntype FollowSetsPerState = Map<number, FollowSetsHolder>;\n\n// Token stream position info after a rule was processed.\ntype RuleEndStatus = Set<number>;\n\nclass PipelineEntry {\n    state: ATNState;\n    tokenIndex: number;\n};\n\n// The main class for doing the collection process.\nexport class CodeCompletionCore {\n    // Debugging options. Print human readable ATN state and other info.\n    public showResult = false;                 // Not dependent on showDebugOutput. Prints the collected rules + tokens to terminal.\n    public showDebugOutput = false;            // Enables printing ATN state info to terminal.\n    public debugOutputWithTransitions = false; // Only relevant when showDebugOutput is true. Enables transition printing for a state.\n    public showRuleStack = false;              // Also depends on showDebugOutput. Enables call stack printing for each rule recursion.\n\n    // Tailoring of the result.\n    public ignoredTokens: Set<number>;        // Tokens which should not appear in the candidates set.\n    public preferredRules: Set<number>;       // Rules which replace any candidate token they contain.\n                                              // This allows to return descriptive rules (e.g. className, instead of ID/identifier).\n\n    private parser: Parser;\n    private atn: ATN;\n    private vocabulary: Vocabulary;\n    private ruleNames: string[];\n    private tokens: TokenList;\n\n    private tokenStartIndex: number = 0;\n\n    private statesProcessed: number = 0;\n\n    // A mapping of rule index + token stream position to end token positions.\n    // A rule which has been visited before with the same input position will always produce the same output positions.\n    private shortcutMap: Map<number, Map<number, RuleEndStatus>> = new Map();\n    private candidates: CandidatesCollection = new CandidatesCollection(); // The collected candidates (rules and tokens).\n\n    private static followSetsByATN: Map<string, FollowSetsPerState> = new Map();\n\n    constructor(parser: Parser) {\n        this.parser = parser;\n        this.atn = parser.atn;\n        this.vocabulary = parser.vocabulary;\n        this.ruleNames = parser.ruleNames;\n        this.ignoredTokens = new Set();\n        this.preferredRules = new Set();\n    }\n\n    /**\n     * This is the main entry point. The caret token index specifies the token stream index for the token which currently\n     * covers the caret (or any other position you want to get code completion candidates for).\n     * Optionally you can pass in a parser rule context which limits the ATN walk to only that or called rules. This can significantly\n     * speed up the retrieval process but might miss some candidates (if they are outside of the given context).\n     */\n    public collectCandidates(caretTokenIndex: number, context?: ParserRuleContext): CandidatesCollection {\n        this.shortcutMap.clear();\n        this.candidates.rules.clear();\n        this.candidates.tokens.clear();\n        this.statesProcessed = 0;\n\n        this.tokenStartIndex = context ? context.start.tokenIndex : 0;\n        let tokenStream: TokenStream = this.parser.inputStream;\n\n        let currentIndex = tokenStream.index;\n        tokenStream.seek(this.tokenStartIndex);\n        this.tokens = [];\n        let offset = 1;\n        while (true) {\n            let token = tokenStream.LT(offset++);\n            this.tokens.push(token.type);\n            if (token.tokenIndex >= caretTokenIndex || token.type == Token.EOF)\n                break;\n        }\n        tokenStream.seek(currentIndex);\n\n        let callStack: number[] = [];\n        let startRule = context ? context.ruleIndex : 0;\n        this.processRule(this.atn.ruleToStartState[startRule], 0, callStack, \"\");\n\n        if (this.showResult) {\n            console.log(\"States processed: \" + this.statesProcessed);\n            console.log(\"\\n\\nCollected rules:\\n\");\n            for (let rule of this.candidates.rules) {\n                let path = \"\";\n                for (let token of rule[1]) {\n                    path += this.ruleNames[token] + \" \";\n                }\n                console.log(this.ruleNames[rule[0]] + \", path: \", path);\n            }\n\n            let sortedTokens: Set<string> = new Set();\n            for (let token of this.candidates.tokens) {\n                let value: string = this.vocabulary.getDisplayName(token[0]);\n                for (let following of token[1])\n                    value += \" \" + this.vocabulary.getDisplayName(following);\n                sortedTokens.add(value);\n            }\n\n            console.log(\"\\n\\nCollected tokens:\\n\");\n            for (let symbol of sortedTokens) {\n                console.log(symbol);\n            }\n            console.log(\"\\n\\n\");\n        }\n\n        return this.candidates;\n    }\n\n    /**\n     * Checks if the predicate associated with the given transition evaluates to true.\n     */\n    private checkPredicate(transition: PredicateTransition): boolean {\n        return transition.predicate.eval(this.parser, ParserRuleContext.emptyContext());\n    }\n\n    /**\n     * Walks the rule chain upwards to see if that matches any of the preferred rules.\n     * If found, that rule is added to the collection candidates and true is returned.\n     */\n    private translateToRuleIndex(ruleStack: RuleList): boolean {\n        if (this.preferredRules.size == 0)\n            return false;\n\n        // Loop over the rule stack from highest to lowest rule level. This way we properly handle the higher rule\n        // if it contains a lower one that is also a preferred rule.\n        for (let i = 0; i < ruleStack.length; ++i) {\n            if (this.preferredRules.has(ruleStack[i])) {\n                // Add the rule to our candidates list along with the current rule path,\n                // but only if there isn't already an entry like that.\n                let path = ruleStack.slice(0, i);\n                let addNew = true;\n                for (let rule of this.candidates.rules) {\n                    if (rule[0] != ruleStack[i] || rule[1].length != path.length)\n                        continue;\n                    // Found an entry for this rule. Same path? If so don't add a new (duplicate) entry.\n                    if (path.every((v, j) => v === rule[1][j])) {\n                        addNew = false;\n                        break;\n                    }\n                }\n\n                if (addNew) {\n                    this.candidates.rules.set(ruleStack[i], path);\n                    if (this.showDebugOutput)\n                        console.log(\"=====> collected: \", this.ruleNames[i]);\n                }\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * This method follows the given transition and collects all symbols within the same rule that directly follow it\n     * without intermediate transitions to other rules and only if there is a single symbol for a transition.\n     */\n    private getFollowingTokens(transition: Transition): number[] {\n        let result: number[] = [];\n\n        let seen: ATNState[] = [];\n        let pipeline: ATNState[] = [transition.target];\n\n        while (pipeline.length > 0) {\n            let state = pipeline.pop();\n\n            for (let transition of state!.getTransitions()) {\n                if (transition.serializationType == TransitionType.ATOM) {\n                    if (!transition.isEpsilon) {\n                        let list = transition.label!.toList();\n                        if (list.length == 1 && !this.ignoredTokens.has(list[0])) {\n                            result.push(list[0]);\n                            pipeline.push(transition.target);\n                        }\n                    } else {\n                        pipeline.push(transition.target);\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Entry point for the recursive follow set collection function.\n     */\n    private determineFollowSets(start: ATNState, stop: ATNState): FollowSetWithPath[] {\n        let result: FollowSetWithPath[] = [];\n        let seen: Set<ATNState> = new Set();\n        let ruleStack: number[] = [];\n        this.collectFollowSets(start, stop, result, seen, ruleStack);\n\n        return result;\n    }\n\n    /**\n     * Collects possible tokens which could be matched following the given ATN state. This is essentially the same\n     * algorithm as used in the LL1Analyzer class, but here we consider predicates also and use no parser rule context.\n     */\n    private collectFollowSets(s: ATNState, stopState: ATNState, followSets: FollowSetWithPath[], seen: Set<ATNState>, ruleStack: number[]) {\n\n        if (seen.has(s))\n            return;\n\n        seen.add(s);\n\n        if (s == stopState || s.stateType == ATNStateType.RULE_STOP) {\n            let set = new FollowSetWithPath();\n            set.intervals = IntervalSet.of(Token.EPSILON);\n            set.path = ruleStack.slice();\n            followSets.push(set);\n            return;\n        }\n\n        for (let transition of s.getTransitions()) {\n            if (transition.serializationType == TransitionType.RULE) {\n                let ruleTransition: RuleTransition = transition as RuleTransition;\n                if (ruleStack.indexOf(ruleTransition.target.ruleIndex) != -1)\n                    continue;\n\n                ruleStack.push(ruleTransition.target.ruleIndex);\n                this.collectFollowSets(transition.target, stopState, followSets, seen, ruleStack);\n                ruleStack.pop();\n\n            } else if (transition.serializationType == TransitionType.PREDICATE) {\n                if (this.checkPredicate(transition as PredicateTransition))\n                    this.collectFollowSets(transition.target, stopState, followSets, seen, ruleStack);\n            } else if (transition.isEpsilon) {\n                this.collectFollowSets(transition.target, stopState, followSets, seen, ruleStack);\n            } else if (transition.serializationType == TransitionType.WILDCARD) {\n                let set = new FollowSetWithPath();\n                set.intervals = IntervalSet.of(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);\n                set.path = ruleStack.slice();\n                followSets.push(set);\n            } else {\n                let label = transition.label;\n                if (label && label.size > 0) {\n                    if (transition.serializationType == TransitionType.NOT_SET) {\n                        label = label.complement(IntervalSet.of(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType));\n                    }\n                    let set = new FollowSetWithPath();\n                    set.intervals = label;\n                    set.path = ruleStack.slice();\n                    set.following = this.getFollowingTokens(transition);\n                    followSets.push(set);\n                }\n            }\n        }\n    }\n\n    /**\n     * Walks the ATN for a single rule only. It returns the token stream position for each path that could be matched in this rule.\n     * The result can be empty in case we hit only non-epsilon transitions that didn't match the current input or if we\n     * hit the caret position.\n     */\n    private processRule(startState: ATNState, tokenIndex: number, callStack: number[], indentation: string): RuleEndStatus {\n\n        // Start with rule specific handling before going into the ATN walk.\n\n        // Check first if we've taken this path with the same input before.\n        let positionMap = this.shortcutMap.get(startState.ruleIndex);\n        if (!positionMap) {\n            positionMap = new Map();\n            this.shortcutMap.set(startState.ruleIndex, positionMap);\n        } else {\n            if (positionMap.has(tokenIndex)) {\n                if (this.showDebugOutput) {\n                    console.log(\"=====> shortcut\");\n                }\n                return positionMap.get(tokenIndex)!;\n            }\n        }\n\n        let result: RuleEndStatus = new Set<number>();\n\n        // For rule start states we determine and cache the follow set, which gives us 3 advantages:\n        // 1) We can quickly check if a symbol would be matched when we follow that rule. We can so check in advance\n        //    and can save us all the intermediate steps if there is no match.\n        // 2) We'll have all symbols that are collectable already together when we are at the caret when entering a rule.\n        // 3) We get this lookup for free with any 2nd or further visit of the same rule, which often happens\n        //    in non trivial grammars, especially with (recursive) expressions and of course when invoking code completion\n        //    multiple times.\n        let setsPerState = CodeCompletionCore.followSetsByATN.get(this.parser.constructor.name);\n        if (!setsPerState) {\n            setsPerState = new Map();\n            CodeCompletionCore.followSetsByATN.set(this.parser.constructor.name, setsPerState);\n        }\n\n        let followSets = setsPerState.get(startState.stateNumber);\n        if (!followSets) {\n            followSets = new FollowSetsHolder();\n            setsPerState.set(startState.stateNumber, followSets);\n            let stop = this.atn.ruleToStopState[startState.ruleIndex];\n            followSets.sets = this.determineFollowSets(startState, stop);\n\n            // Sets are split by path to allow translating them to preferred rules. But for quick hit tests\n            // it is also useful to have a set with all symbols combined.\n            let combined = new IntervalSet();\n            for (let set of followSets.sets)\n                combined.addAll(set.intervals);\n            followSets.combined = combined;\n        }\n\n        callStack.push(startState.ruleIndex);\n        if (tokenIndex >= this.tokens.length - 1) { // At caret?\n            if (this.preferredRules.has(startState.ruleIndex)) {\n                // No need to go deeper when collecting entries and we reach a rule that we want to collect anyway.\n                this.translateToRuleIndex(callStack);\n            } else {\n                // Convert all follow sets to either single symbols or their associated preferred rule and add\n                // the result to our candidates list.\n                for (let set of followSets.sets) {\n                    let fullPath = callStack.slice();\n                    fullPath.push(...set.path);\n                    if (!this.translateToRuleIndex(fullPath)) {\n                        for (let symbol of set.intervals.toList())\n                            if (!this.ignoredTokens.has(symbol)) {\n                                if (this.showDebugOutput) {\n                                    console.log(\"=====> collected: \", this.vocabulary.getDisplayName(symbol));\n                                }\n                                if (!this.candidates.tokens.has(symbol))\n                                    this.candidates.tokens.set(symbol, set.following); // Following is empty if there is more than one entry in the set.\n                                else {\n                                    // More than one following list for the same symbol.\n                                    if (this.candidates.tokens.get(symbol) != set.following)\n                                        this.candidates.tokens.set(symbol, []);\n                                }\n                            }\n                    }\n                }\n            }\n\n            callStack.pop();\n            return result;\n\n        } else {\n            // Process the rule if we either could pass it without consuming anything (epsilon transition)\n            // or if the current input symbol will be matched somewhere after this entry point.\n            // Otherwise stop here.\n            let currentSymbol = this.tokens[tokenIndex];\n            if (!followSets.combined.contains(Token.EPSILON) && !followSets.combined.contains(currentSymbol)) {\n                callStack.pop();\n                return result;\n            }\n        }\n\n        // The current state execution pipeline contains all yet-to-be-processed ATN states in this rule.\n        // For each such state we store the token index + a list of rules that lead to it.\n        let statePipeline: PipelineEntry[] = [];\n        let currentEntry;\n\n        // Bootstrap the pipeline.\n        statePipeline.push({ state: startState, tokenIndex: tokenIndex });\n\n        while (statePipeline.length > 0) {\n            currentEntry = statePipeline.pop()!;\n            ++this.statesProcessed;\n\n            let currentSymbol = this.tokens[currentEntry.tokenIndex];\n\n            let atCaret = currentEntry.tokenIndex >= this.tokens.length - 1;\n            if (this.showDebugOutput) {\n                this.printDescription(indentation, currentEntry.state, this.generateBaseDescription(currentEntry.state), currentEntry.tokenIndex);\n                if (this.showRuleStack)\n                    this.printRuleState(callStack);\n            }\n\n            switch (currentEntry.state.stateType) {\n                case ATNStateType.RULE_START: // Happens only for the first state in this rule, not subrules.\n                    indentation += \"  \";\n                    break;\n\n                case ATNStateType.RULE_STOP: {\n                    // Record the token index we are at, to report it to the caller.\n                    result.add(currentEntry.tokenIndex);\n                    continue;\n                }\n\n                default:\n                    break;\n            }\n\n            let transitions = currentEntry.state.getTransitions();\n            for (let transition of transitions) {\n                switch (transition.serializationType) {\n                    case TransitionType.RULE: {\n                        let endStatus = this.processRule(transition.target, currentEntry.tokenIndex, callStack, indentation);\n                        for (let position of endStatus) {\n                            statePipeline.push({ state: (<RuleTransition>transition).followState, tokenIndex: position });\n                        }\n                        break;\n                    }\n\n                    case TransitionType.PREDICATE: {\n                        if (this.checkPredicate(transition as PredicateTransition))\n                            statePipeline.push({ state: transition.target, tokenIndex: currentEntry.tokenIndex });\n                        break;\n                    }\n\n                    case TransitionType.WILDCARD: {\n                        if (atCaret) {\n                            if (!this.translateToRuleIndex(callStack)) {\n                                for (let token of IntervalSet.of(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType).toList())\n                                    if (!this.ignoredTokens.has(token))\n                                        this.candidates.tokens.set(token, []);\n                            }\n                        } else {\n                            statePipeline.push({ state: transition.target, tokenIndex: currentEntry.tokenIndex + 1 });\n                        }\n                        break;\n                    }\n\n                    default: {\n                        if (transition.isEpsilon) {\n                            if (atCaret) {\n                                this.translateToRuleIndex(callStack);\n                            }\n                            // Jump over simple states with a single outgoing epsilon transition.\n                            statePipeline.push({ state: transition.target, tokenIndex: currentEntry.tokenIndex });\n                            continue;\n                        }\n\n                        let set = transition.label;\n                        if (set && set.size > 0) {\n                            if (transition.serializationType == TransitionType.NOT_SET) {\n                                set = set.complement(IntervalSet.of(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType));\n                            }\n                            if (atCaret) {\n                                if (!this.translateToRuleIndex(callStack)) {\n                                    let list = set.toList();\n                                    let addFollowing = list.length == 1;\n                                    for (let symbol of list)\n                                        if (!this.ignoredTokens.has(symbol)) {\n                                            if (this.showDebugOutput)\n                                                console.log(\"=====> collected: \", this.vocabulary.getDisplayName(symbol));\n\n                                            if (addFollowing)\n                                                this.candidates.tokens.set(symbol, this.getFollowingTokens(transition));\n                                            else\n                                                this.candidates.tokens.set(symbol, []);\n                                        }\n                                }\n                            } else {\n                                if (set.contains(currentSymbol)) {\n                                    if (this.showDebugOutput)\n                                        console.log(\"=====> consumed: \", this.vocabulary.getDisplayName(currentSymbol));\n                                    statePipeline.push({ state: transition.target, tokenIndex: currentEntry.tokenIndex + 1 });\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        callStack.pop();\n\n        // Cache the result, for later lookup to avoid duplicate walks.\n        positionMap.set(tokenIndex, result);\n\n        return result;\n    }\n\n    private atnStateTypeMap: string[] = [\n        \"invalid\",\n        \"basic\",\n        \"rule start\",\n        \"block start\",\n        \"plus block start\",\n        \"star block start\",\n        \"token start\",\n        \"rule stop\",\n        \"block end\",\n        \"star loop back\",\n        \"star loop entry\",\n        \"plus loop back\",\n        \"loop end\"\n    ]\n\n    private generateBaseDescription(state: ATNState): string {\n        let stateValue = state.stateNumber == ATNState.INVALID_STATE_NUMBER ? \"Invalid\" : state.stateNumber;\n        return \"[\" + stateValue + \" \" + this.atnStateTypeMap[state.stateType] + \"] in \" + this.ruleNames[state.ruleIndex];\n    }\n\n    private printDescription(currentIndent: string, state: ATNState, baseDescription: string, tokenIndex: number) {\n\n        let output = currentIndent;\n\n        let transitionDescription = \"\";\n        if (this.debugOutputWithTransitions) {\n            for (let transition of state.getTransitions()) {\n                let labels = \"\";\n                let symbols: number[] = transition.label ? transition.label.toList() : [];\n                if (symbols.length > 2) {\n                    // Only print start and end symbols to avoid large lists in debug output.\n                    labels = this.vocabulary.getDisplayName(symbols[0]) + \" .. \" + this.vocabulary.getDisplayName(symbols[symbols.length - 1]);\n                } else {\n                    for (let symbol of symbols) {\n                        if (labels.length > 0)\n                            labels += \", \";\n                        labels += this.vocabulary.getDisplayName(symbol);\n                    }\n                }\n                if (labels.length == 0)\n                    labels = \"ε\";\n                transitionDescription += \"\\n\" + currentIndent + \"\\t(\" + labels + \") \" + \"[\" + transition.target.stateNumber + \" \" +\n                    this.atnStateTypeMap[transition.target.stateType] + \"] in \" + this.ruleNames[transition.target.ruleIndex];\n            }\n        }\n\n        if (tokenIndex >= this.tokens.length - 1)\n            output += \"<<\" + this.tokenStartIndex + tokenIndex + \">> \";\n        else\n            output += \"<\" + this.tokenStartIndex + tokenIndex + \"> \";\n        console.log(output + \"Current state: \" + baseDescription + transitionDescription);\n    }\n\n    private printRuleState(stack: number[]) {\n        if (stack.length == 0) {\n            console.log(\"<empty stack>\");\n            return;\n        }\n\n        for (let rule of stack)\n            console.log(this.ruleNames[rule]);\n    }\n\n}\n"]}